Topic 8:

Object-oriented programming (OOP) involves programming using objects 
An object represents an entity in the real world that can be distinctly identified 

An object has a unique identity, state, and behaviours 
The state of an object consists of a set of data fields (also known as properties) with their current values 
The behaviour of an object is defined by a set of methods (behaviour defines what the object does) 
A class is a blueprint, a construct that define objects of the same type 


Classes 
A Java class uses variables to define data fields and methods to define behaviors 
A class provides a special type of methods, known as constructors, which are invoked to construct objects from the class 

Constructors 
Constructors must have the same name as the class 
Constructors do not have a return type – not even void 
Constructors play the role of initialising objects: invoked using the new operator 

Declaring an object reference variables 
To declare a reference variable, use the syntax: 
     ClassName objectRefVar;
E.g.
     Circle myCircle;

Referencing the object’s data: objectRefVar.data e.g., myCircle.radius 

Invoking the object’s method: objectRefVar.methodName(arguments) e.g., myCircle.getArea() 

Data Fields 
Data fields (i.e. attributes of a class) can be of reference types 

Class Abstraction and Encapsulation:

Class abstraction means to separate class implementation from the use of the class 
The creator of the class provides a description of the class and let the user know how the class can be used 
The user of the class does not need to know how the class is implemented 

Class encapsulation: the details of implementation are encapsulated and hidden from the user 

Visibility Modifiers: 
public: accessible from any other classes 
private: accessible only from within its own class 
protected: a protected data or method in a public class can be accessed by any class in the same package or its subclasses
If no visibility modifier is used: the default = Accessible by any class in the same package 

OOP:
Instance variables belong to a specific instance 
Instance methods are invoked by an instance of the class 
Static variables are shared by all the instances of the class 
Static methods are not tied to a specific object 
The scope of instance and static variables is the entire class. They can be declared anywhere inside a class. 
The scope of a local variable starts from its declaration and continues to the end of the block that contains the variable. A local variable must be initialized explicitly before it can be used.
 
The this keyword: 
The this keyword is the name of a reference that refers to an object itself 
One common use of the this keyword is reference a class’s “hidden” data fields Another common use of the this keyword to enable a constructor to invoke another constructor of the same class 








